1. "" dengan '' sama aja sebenernya ga ada bedanya cuman convention doang
2. Class vs ClassName = Class takutnya salah di artikan sebagai kelas javascript not in JSX
3. () ini namanya parentheses >> buat manggil function
4. {} Kalo curly brace itu artinya object
5. JSX can't show plain object,  perlu dikasih tipe data apa yang mau di panggil 
6. Different JSX and html syntax: belum tentu buat error tapi warning aja
7. JSX interpolation
8.
Component Nesting >> Ada di dalemnya
Component resuability >> Mau di pake lagi berkali kali
Component Configuration >> Cara membuatnya
9. alt for images kalo error dia show itu
10. props= property

Props >> passing data from parent componnt do a child component, goalnya untuk customize or configure a child component
Berarti ada yang passing dan parent

Ga bisa props di akses langsung lewat function, harus di akses lewat js variable {}

lewat props.children nanti bisa ngakses props bawahnya

class based vs functional component
Tergantung kebutuhan
Class based components
1. Easier code organization
2. Can use 'state' >> easier to handle user input
3. Understands lifecycle events >> Easier to do things when the app first starts

State
1. Only usabale with class components
2. State is a js Object that contains data relevant to a component
3. Updating state on a componentn causes th ecomponent to (almost) instantly rerender ONLY using setState
4. State must be initialized when a component is created

Constructor itu sangat pertama kali banget di panggil
State hanya boleh di inisiasi 1 kali di this.state dan hanya bisa di update dengan setState

controlled event give instant access to state 

Function .toUpperCase() buat upper case semua input >> case bagus buat nama kartu kredit

form punya default untuk refresh page, dengan function prevent default dia ga akan refresh page sendiri

constructor needed super if they have extends
Salah satu cara solve error this. (state undefined) dengan bind, bisa pake cara arrow function di onFormSubmit juga

you can use .then statement for get status data like 200 or 4XX, buat console log kalo ada error

default property dulu pake null sekarang pake array
Kalo udah tau mau pake data array masukin aja pake empty array atau object

map function that built in array object, map kalo datanya null error kalo di empty array no problem

this bisa di console.log

ref = reference
1. Gives access to a single DOM element
2. Need to define constructor function to crate a reference and assign it as an instance

find out callbacks and imageref

what is spans?

Redux => state management library
Makes complex applications easier
not required CRA
not explicity designed to work with react

Redux cycle
1. Action Creator
2. Action
3. Dispatch 
4. Reducer
5. State

Redux is not Magic!
- Redux does not automatically detect action creators being called
- Redux does not automatically detect a function returning an object is an 'action'

middleware in Redux
- Function that gets called with every action we Dispatch
- Has the ability to stop, modify or otherwise mess around with actions
- Tons of open source middleware exist
- Most popular use of middleware is for dealing with asunc actions
- we are going to use a middleware called 'Redux-Thunk' to solve our async issues

redux thunk can dispatch a function and it's help a lot

reducer
1. Only can return any besides 'undefined'  
2. If state v1 come with function can produce state v2
3. Pure reducers, only call state + action
4. Must not mutate its input state argument
means not mutate the value not the content

mutations in javascript
.push for adding data to array, .pop delete last data at array
- anytime that we change the contents of an array it is referred to as a mutation
- in javascript string and number are immuteable, only array and object muteable

equality arrays and object
const numbers = [1,2,3]
===case 1=== 
number === [1,2,3] >> false
they reference to the exact same array in memory not the contents 


safe state updates in reducers
1. removing an element from an array 
state.pop() >> state.filter(element => element !== 'hi')
2. Adding an element to an array
state.push('hi') >> [...state, 'hi']
3. Replacing an element in an array
state[0] = 'hi' >> state.map(el => el 'hi' ? 'bye' : el)
4. Updating a property in an object
state.name = 'Sam' >> {...state, name: 'Sam'}
5. Adding a property to an object
state.age = 30 >> {...state, age: 30}
6. Removing a property from an object
delete.state.name >> {...state, age: undefined}

lodash function .mememoize gunanya buat memingat function yang udah lewat, jadi kalo dia panggil lagi yang sama ga perlu re run function

lodash banyak sekali function penting di dalamnya
_.chain bisa naroh banyak function dengan sederhana tapi di terakhir harus ada .value() mirip kayak break lah

manggil api berkali kali di sebut over fetching stuff